# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule VRChat.Groups do
  @moduledoc """
  API calls for all endpoints tagged `Groups`.
  """

  alias VRChat.Connection
  import VRChat.RequestBuilder

  @doc """
  Add Group Gallery Image
  Adds an image to a Group gallery.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_gallery_id` (String.t): Must be a valid group gallery ID.
  - `opts` (keyword): Optional parameters
    - `:body` (AddGroupGalleryImageRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupGalleryImage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_group_gallery_image(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupGalleryImage.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def add_group_gallery_image(connection, group_id, group_gallery_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/galleries/#{group_gallery_id}/images")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupGalleryImage{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Add Role to GroupMember
  Adds a Role to a Group Member

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `group_role_id` (String.t): Must be a valid group role ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_group_member_role(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, list(String.t())} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def add_group_member_role(connection, group_id, user_id, group_role_id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/members/#{user_id}/roles/#{group_role_id}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Ban Group Member
  Bans a user from a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:body` (BanGroupMemberRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec ban_group_member(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupMember.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def ban_group_member(connection, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/bans")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupMember{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Cancel Group Join Request
  Cancels a request sent to join the group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cancel_group_request(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def cancel_group_request(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/requests")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {403, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Create Group
  Creates a Group and returns a Group object. **Requires VRC+ Subscription.**

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateGroupRequest): 

  ### Returns

  - `{:ok, VRChat.Model.Group.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_group(Tesla.Env.client(), keyword()) ::
          {:ok, VRChat.Model.Group.t()} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def create_group(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Group{}},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Create Group Announcement
  Creates an Announcement for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateGroupAnnouncementRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupAnnouncement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_group_announcement(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, VRChat.Model.GroupAnnouncement.t()}
          | {:error, Tesla.Env.t()}
  def create_group_announcement(connection, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/announcement")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupAnnouncement{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Create Group Gallery
  Creates a gallery for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateGroupGalleryRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupGallery.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_group_gallery(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupGallery.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_group_gallery(connection, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/galleries")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupGallery{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Invite User to Group
  Sends an invite to a user to join the group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateGroupInviteRequest): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_group_invite(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def create_group_invite(connection, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/invites")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Create GroupRole
  Create a Group role.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateGroupRoleRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_group_role(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupRole.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def create_group_role(connection, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/roles")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupRole{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Delete Group
  Deletes a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.Success.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_group(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Success.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def delete_group(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Success{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Delete Group Announcement
  Deletes the announcement for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.Success.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_group_announcement(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Success.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def delete_group_announcement(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/announcement")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Success{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Delete Group Gallery
  Deletes a gallery for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_gallery_id` (String.t): Must be a valid group gallery ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.Success.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_group_gallery(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Success.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def delete_group_gallery(connection, group_id, group_gallery_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/galleries/#{group_gallery_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Success{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Delete Group Gallery Image
  Deletes an image from a Group gallery.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_gallery_id` (String.t): Must be a valid group gallery ID.
  - `group_gallery_image_id` (String.t): Must be a valid group gallery image ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.Success.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_group_gallery_image(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, VRChat.Model.Success.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def delete_group_gallery_image(
        connection,
        group_id,
        group_gallery_id,
        group_gallery_image_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/galleries/#{group_gallery_id}/images/#{group_gallery_image_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Success{}},
      {401, %VRChat.Model.Error{}},
      {403, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Delete User Invite
  Deletes an Group invite sent to a User

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_group_invite(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def delete_group_invite(connection, group_id, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/invites/#{user_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Delete Group Role
  Deletes a Group Role by ID and returns the remaining roles.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_role_id` (String.t): Must be a valid group role ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%GroupRole{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_group_role(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, list(VRChat.Model.GroupRole.t())}
          | {:error, Tesla.Env.t()}
  def delete_group_role(connection, group_id, group_role_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/roles/#{group_role_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupRole{}]},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group by ID
  Returns a single Group by ID.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:includeRoles` (boolean()): Include roles for the Group object. Defaults to false.

  ### Returns

  - `{:ok, VRChat.Model.Group.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Group.t()} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def get_group(connection, group_id, opts \\ []) do
    optional_params = %{
      :includeRoles => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Group{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Announcement
  Returns the announcement for a Group. If no announcement has been made, then it returns **empty object**.  If an announcement exists, then it will always return all fields except `imageId` and `imageUrl` which may be null.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.GroupAnnouncement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_announcements(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, VRChat.Model.GroupAnnouncement.t()}
          | {:error, Tesla.Env.t()}
  def get_group_announcements(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/announcement")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupAnnouncement{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Audit Logs
  Returns a list of audit logs for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:n` (integer()): The number of objects to return.
    - `:offset` (integer()): A zero-based offset from the default object sorting from where search results start.
    - `:startDate` (DateTime.t): The start date of the search range.
    - `:endDate` (DateTime.t): The end date of the search range.

  ### Returns

  - `{:ok, VRChat.Model.PaginatedGroupAuditLogEntryList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_audit_logs(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.PaginatedGroupAuditLogEntryList.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_audit_logs(connection, group_id, opts \\ []) do
    optional_params = %{
      :n => :query,
      :offset => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/auditLogs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.PaginatedGroupAuditLogEntryList{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Bans
  Returns a list of banned users for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:n` (integer()): The number of objects to return.
    - `:offset` (integer()): A zero-based offset from the default object sorting from where search results start.

  ### Returns

  - `{:ok, [%GroupMember{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_bans(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.GroupMember.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_bans(connection, group_id, opts \\ []) do
    optional_params = %{
      :n => :query,
      :offset => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/bans")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupMember{}]},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Gallery Images
  Returns a list of images for a Group gallery.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_gallery_id` (String.t): Must be a valid group gallery ID.
  - `opts` (keyword): Optional parameters
    - `:n` (integer()): The number of objects to return.
    - `:offset` (integer()): A zero-based offset from the default object sorting from where search results start.
    - `:approved` (boolean()): If specified, only returns images that have been approved or not approved.

  ### Returns

  - `{:ok, [%GroupGalleryImage{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_gallery_images(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.GroupGalleryImage.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_gallery_images(connection, group_id, group_gallery_id, opts \\ []) do
    optional_params = %{
      :n => :query,
      :offset => :query,
      :approved => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/galleries/#{group_gallery_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupGalleryImage{}]},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Invites Sent
  Returns a list of members that have been invited to the Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%GroupMember{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_invites(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.GroupMember.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_invites(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/invites")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupMember{}]},
      {401, %VRChat.Model.Error{}},
      {403, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Member
  Returns a LimitedGroup Member.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.GroupLimitedMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_member(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, VRChat.Model.GroupLimitedMember.t()}
          | {:error, Tesla.Env.t()}
  def get_group_member(connection, group_id, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/members/#{user_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupLimitedMember{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  List Group Members
  Returns a List of all **other** Group Members. This endpoint will never return the user calling the endpoint. Information about the user calling the endpoint must be found in the `myMember` field of the Group object.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:n` (integer()): The number of objects to return.
    - `:offset` (integer()): A zero-based offset from the default object sorting from where search results start.

  ### Returns

  - `{:ok, [%GroupMember{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.GroupMember.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_members(connection, group_id, opts \\ []) do
    optional_params = %{
      :n => :query,
      :offset => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupMember{}]},
      {400, %VRChat.Model.Error{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  List Group Permissions
  Returns a List of all possible/available permissions for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%GroupPermission{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_permissions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.GroupPermission.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_permissions(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/permissions")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupPermission{}]},
      {400, %VRChat.Model.Error{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Join Requests
  Returns a list of members that have requested to join the Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%GroupMember{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_requests(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.GroupMember.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_group_requests(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/requests")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupMember{}]},
      {403, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Group Roles
  Returns a Group Role by ID.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%GroupRole{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_group_roles(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, list(VRChat.Model.GroupRole.t())}
          | {:error, Tesla.Env.t()}
  def get_group_roles(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/roles")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupRole{}]},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Join Group
  Join a Group by ID and returns the member object.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.GroupMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec join_group(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupMember.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def join_group(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/join")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupMember{}},
      {400, %VRChat.Model.Error{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Kick Group Member
  Kicks a Group Member from the Group. The current user must have the \"Remove Group Members\" permission.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec kick_group_member(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def kick_group_member(connection, group_id, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/members/#{user_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, %VRChat.Model.Error{}},
      {403, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Leave Group
  Leave a group by ID.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec leave_group(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def leave_group(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/leave")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {403, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Remove Role from GroupMember
  Removes a Role from a Group Member

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `group_role_id` (String.t): Must be a valid group role ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_group_member_role(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, list(String.t())} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def remove_group_member_role(connection, group_id, user_id, group_role_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/members/#{user_id}/roles/#{group_role_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Respond Group Join request
  Responds to a Group Join Request with Accept/Deny

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters
    - `:body` (RespondGroupJoinRequest): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec respond_group_join_request(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def respond_group_join_request(connection, group_id, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/requests/#{user_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Unban Group Member
  Unbans a user from a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.GroupMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec unban_group_member(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupMember.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def unban_group_member(connection, group_id, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/bans/#{user_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupMember{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Update Group
  Updates a Group and returns it.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateGroupRequest): 

  ### Returns

  - `{:ok, VRChat.Model.Group.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_group(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Group.t()} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def update_group(connection, group_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Group{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Update Group Gallery
  Updates a gallery for a Group.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_gallery_id` (String.t): Must be a valid group gallery ID.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateGroupGalleryRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupGallery.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_group_gallery(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.GroupGallery.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_group_gallery(connection, group_id, group_gallery_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/galleries/#{group_gallery_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupGallery{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Update Group Member
  Updates a Group Member

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateGroupMemberRequest): 

  ### Returns

  - `{:ok, VRChat.Model.GroupLimitedMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_group_member(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, VRChat.Model.GroupLimitedMember.t()}
          | {:error, Tesla.Env.t()}
  def update_group_member(connection, group_id, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/members/#{user_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.GroupLimitedMember{}},
      {401, %VRChat.Model.Error{}},
      {404, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Update Group Role
  Updates a group role by ID.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `group_id` (String.t): Must be a valid group ID.
  - `group_role_id` (String.t): Must be a valid group role ID.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateGroupRoleRequest): 

  ### Returns

  - `{:ok, [%GroupRole{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_group_role(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, list(VRChat.Model.GroupRole.t())}
          | {:error, Tesla.Env.t()}
  def update_group_role(connection, group_id, group_role_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/roles/#{group_role_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.GroupRole{}]},
      {401, %VRChat.Model.Error{}}
    ])
  end
end
