# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule VRChat.Permissions do
  @moduledoc """
  API calls for all endpoints tagged `Permissions`.
  """

  alias VRChat.Connection
  import VRChat.RequestBuilder

  @doc """
  Get Assigned Permissions
  Returns a list of all permissions currently granted by the user. Permissions are assigned e.g. by subscribing to VRC+.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Permission{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_assigned_permissions(Tesla.Env.client(), keyword()) ::
          {:ok, list(VRChat.Model.Permission.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_assigned_permissions(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/auth/permissions")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.Permission{}]},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get Permission
  Returns a single permission. This endpoint is pretty useless, as it returns the exact same information as `/auth/permissions`.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `permission_id` (String.t): Must be a valid permission ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.Permission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_permission(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.Permission.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_permission(connection, permission_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/permissions/#{permission_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.Permission{}},
      {401, %VRChat.Model.Error{}}
    ])
  end
end
