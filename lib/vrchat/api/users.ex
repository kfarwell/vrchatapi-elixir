# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule VRChat.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias VRChat.Connection
  import VRChat.RequestBuilder

  @doc """
  Get User by ID
  Get public user information about a specific user using their ID.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.User.t()} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def get_user(connection, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.User{}},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get User by Username
  ~~Get public user information about a specific user using their name.~~  **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429). This endpoint now require Admin Credentials.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `username` (String.t): Username of the user
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, VRChat.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user_by_name(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.User.t()} | {:ok, VRChat.Model.Error.t()} | {:error, Tesla.Env.t()}
  def get_user_by_name(connection, username, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/users/#{username}/name")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.User{}},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get User Group Requests
  Returns a list of Groups the user has requested to be invited into.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Group{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user_group_requests(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.Group.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_user_group_requests(connection, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/groups/requested")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.Group{}]},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Get User Groups
  Get user's public groups

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Group{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, list(VRChat.Model.Group.t())}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def get_user_groups(connection, user_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/groups")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.Group{}]},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Search All Users
  Search and list any users by text query

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:search` (String.t): Searches by `displayName`. Will return empty array if search query is empty or missing.
    - `:developerType` (String.t): Active user by developer type, none for normal users and internal for moderators
    - `:n` (integer()): The number of objects to return.
    - `:offset` (integer()): A zero-based offset from the default object sorting from where search results start.

  ### Returns

  - `{:ok, [%LimitedUser{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_users(Tesla.Env.client(), keyword()) ::
          {:ok, VRChat.Model.Error.t()}
          | {:ok, list(VRChat.Model.LimitedUser.t())}
          | {:error, Tesla.Env.t()}
  def search_users(connection, opts \\ []) do
    optional_params = %{
      :search => :query,
      :developerType => :query,
      :n => :query,
      :offset => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%VRChat.Model.LimitedUser{}]},
      {400, %VRChat.Model.Error{}},
      {401, %VRChat.Model.Error{}}
    ])
  end

  @doc """
  Update User Info
  Update a users information such as the email and birthday.

  ### Parameters

  - `connection` (VRChat.Connection): Connection to server
  - `user_id` (String.t): Must be a valid user ID.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateUserRequest): 

  ### Returns

  - `{:ok, VRChat.Model.CurrentUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_user(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, VRChat.Model.CurrentUser.t()}
          | {:ok, VRChat.Model.Error.t()}
          | {:error, Tesla.Env.t()}
  def update_user(connection, user_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/users/#{user_id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %VRChat.Model.CurrentUser{}},
      {401, %VRChat.Model.Error{}}
    ])
  end
end
